[{"categories":["Editor"],"content":"ELPA is stand for Emacs Lisp Package Archive. It‚Äôs used for Emacs users to download packages from, and it‚Äôs also the place where Emacs Lisp developers will host their packages. Here is a list of famous ELPA, see their site for more information! GNU Elpa (official) NonGNU Elpa (official) MELPA ","date":"2023-09-15","objectID":"/blog/build-elpa/:0:0","tags":["Editor","Emacs","ELPA"],"title":"How to build your own ELPA with Eask?","uri":"/blog/build-elpa/"},{"categories":["Editor"],"content":"‚ùì Why? So why do we want to host our own ELPA? Isn‚Äôt those ELPAs enough? Yes, in general you don‚Äôt need to host ELPA yourself since most packages you need will be avaliable in one of those ELPA (packages can co-exist between ELPA). Here are several reasons why you might want to build your own ELPA: Package you like isn‚Äôt (yet) on any ELPA ELPA‚Äôs package review take couple days or months to review (MELPA is probably the fastest) Packages that are no longer maintained, you can link to the new maintained fork Similar to Pt. 3, there are bugs in the package you like, you can create a new fork to replace it! For elisp package development purposes. Sometimes build tools just isn‚Äôt enough. ","date":"2023-09-15","objectID":"/blog/build-elpa/:1:0","tags":["Editor","Emacs","ELPA"],"title":"How to build your own ELPA with Eask?","uri":"/blog/build-elpa/"},{"categories":["Editor"],"content":"üìù Prerequisite Some knowledge about Emacs Lisp Install Eask CLI ","date":"2023-09-15","objectID":"/blog/build-elpa/:2:0","tags":["Editor","Emacs","ELPA"],"title":"How to build your own ELPA with Eask?","uri":"/blog/build-elpa/"},{"categories":["Editor"],"content":"üîç Step 1. Create ELPA project It‚Äôs easy to build your own ELPA with Eask. You only need a few commands and it will run. First, we need to create the ELPA project: $ eask create elpa \u003cproject_name\u003e In the example, I‚Äôm going to use my-elpa as my project name: $ eask create elpa my-elpa Then you will be prompt to create the Eask file; enter required information like this: ‚úì Done cloning the ELPA template Initialize the Eask-file for your project... package name: (my-elpa) version: (1.0.0) description: Test ELPA entry point: (my-elpa.el) emacs version: (26.1) website: keywords: elpa About to write to /home/jenchieh/my-elpa/Eask: (package \"my-elpa\" \"1.0.0\" \"Test ELPA\") (website-url \"\") (keywords \"elpa\") (package-file \"my-elpa.el\") (script \"test\" \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\") (source \"gnu\") (depends-on \"emacs\" \"26.1\") Is this OK? (yes) yes And here is the output: Package-file seems to be missing `my-elpa.el' Preparing your new ELPA project... done v Congratulations! Your new ELPA project is created in /home/jenchieh/my-elpa/ [1] Navigate to /home/jenchieh/my-elpa/ [2] Try out the command `eask info` [3] See the README.md file to learn to use this project Visit https://emacs-eask.github.io/ for quickstart guide and full documentation. Now, you will see the project my-elpa has been created! Use ls command to see what‚Äôs in project folder: root@6a52f76aff2d:/home/jenchieh/my-elpa# ls Eask README.md docs recipes ","date":"2023-09-15","objectID":"/blog/build-elpa/:3:0","tags":["Editor","Emacs","ELPA"],"title":"How to build your own ELPA with Eask?","uri":"/blog/build-elpa/"},{"categories":["Editor"],"content":"üîç Step 2. Add recipes! Now you can add recipes to the recipes folder. If you don‚Äôt know what‚Äôs the recipe, see melpa#recipe-format for more information! In this example, I‚Äôm going to add jcs-modeline to this ELPA. But you can add whatever package you like! This is the recipe file, and place it as my-elpa/recipes/jcs-modeline (no file extension). (jcs-modeline :repo \"jcs-emacs/jcs-modeline\" :fetcher github) ","date":"2023-09-15","objectID":"/blog/build-elpa/:4:0","tags":["Editor","Emacs","ELPA"],"title":"How to build your own ELPA with Eask?","uri":"/blog/build-elpa/"},{"categories":["Editor"],"content":"üîç Step 3. Build it! Nice! Now we have one package in our ELPA. Next is to build our ELPA so we can host it with GitHub pages (or your own server). First, we need to install dependencies for our project. $ eask install-deps The output: root@6a52f76aff2d:/home/jenchieh/my-elpa# eask install-deps Package-file seems to be missing `my-elpa.el' Loading package information... done v Installing 1 package dependency... - [1/1] Installing github-elpa (20200129.417)... done v (Total of 1 dependency installed, 0 skipped) Once all dependencies have been installed, we can build our ELPA with following command: $ eask run build The output: :: github-elpa: packaging recipe jcs-modeline Package: jcs-modeline Fetcher: github Source: https://github.com/jcs-emacs/jcs-modeline.git Cloning https://github.com/jcs-emacs/jcs-modeline.git to /home/jenchieh/my-elpa/.github-elpa-working/jcs-modeline/ Checking out afff69f4ef4a126902abe271f1e3fd22b9f91021 Copying files (-\u003e) and directories (=\u003e) from /home/jenchieh/my-elpa/.github-elpa-working/jcs-modeline/ to /tmp/jcs-modelinengILfd/jcs-modeline-20230901.330 jcs-modeline.el -\u003e jcs-modeline.el Created jcs-modeline-20230901.330.tar containing: jcs-modeline-20230901.330/ jcs-modeline-20230901.330/jcs-modeline-pkg.el jcs-modeline-20230901.330/jcs-modeline.el ‚úì Success: 2023-09-16T03:29:36+0000 jcs-modeline-20230901.330.entry 2023-09-16T03:29:36+0000 jcs-modeline-20230901.330.tar Built jcs-modeline in 0.655s, finished at 2023-09-16T03:29:36+0000 Congratulations! üéâ Now you have your own ELPA! Next you would just need to push to a GitHub repo and enable GitHub Pages for that repo. See github-elpa#3-change-repository-setting for more information! ","date":"2023-09-15","objectID":"/blog/build-elpa/:5:0","tags":["Editor","Emacs","ELPA"],"title":"How to build your own ELPA with Eask?","uri":"/blog/build-elpa/"},{"categories":["LSP"],"content":" Repo Link: https://github.com/shader-ls/vscode-shader Aug 23rd, 2023. I‚Äôve created my first VSCode plugin ‚Äì vscode-shader. My intention was simple: to create a language server‚Äôs client in VSCode for my shader-language-server that I created a couple of months ago. ü§î ","date":"2023-08-24","objectID":"/blog/vscode-shader/:0:0","tags":["LSP"],"title":"My first VSCode plugin","uri":"/blog/vscode-shader/"},{"categories":["LSP"],"content":"üî∞ Simple and good UX First of all, it is very simple to develop a VSCode plugin. Especially developing a language server‚Äôs client for VSCode. There are many examples and good documentation on their site, making it very easy for developers. I am using uniteai and grammarly-language-server as the references. ","date":"2023-08-24","objectID":"/blog/vscode-shader/:1:0","tags":["LSP"],"title":"My first VSCode plugin","uri":"/blog/vscode-shader/"},{"categories":["LSP"],"content":"üì¶ Publish to VSCode Marketplace Publishing to VSCode is probably the most challenging step since you need to navigate to Azure DevOps, which seems utterly irrelevant to VSCode Marketplace! ü§î Then get the Personal Access Token in order to publish your packages to the marketplace. It‚Äôs still straightforward but quite confusing on the Azure DevOps part. Then you just need to npm install -g @vscode/vsce, vsce package and vsce publish. While publishing, you will be asked to enter your PAT! You can see VSCode‚Äôs Publishing Extensions website for more information! ","date":"2023-08-24","objectID":"/blog/vscode-shader/:2:0","tags":["LSP"],"title":"My first VSCode plugin","uri":"/blog/vscode-shader/"},{"categories":["LSP"],"content":"üéñÔ∏è Achievement Created a language server client, vscode-shader. My first published VSCode plugin, see https://marketplace.visualstudio.com/items?itemName=shader-ls.vscode-shader. ","date":"2023-08-24","objectID":"/blog/vscode-shader/:3:0","tags":["LSP"],"title":"My first VSCode plugin","uri":"/blog/vscode-shader/"},{"categories":["LSP"],"content":" Repo Link: https://github.com/shader-ls/shader-language-server April 30th, 2023. I have created my first language server that is actually useful to someone. I tried a language server a while back, but it was just an example server, so it‚Äôs not very useful, and it‚Äôs only for educational purposes. The target language I chose to write is the ShaderLab language. ShaderLab is used in Unity Engine, so you can write custom shaders to stylize your game. Unlike regular programming languages, ShaderLab is much simpler to analyze, so the language server can respond to the client side. ","date":"2023-08-23","objectID":"/blog/shader-ls/:0:0","tags":["LSP"],"title":"Shader Language Server (LS)","uri":"/blog/shader-ls/"},{"categories":["LSP"],"content":"‚ùì Why chose C# as the implementaion language? Since Unity Engine‚Äôs most popular scripting language is C#, I reckon choosing C# is the perfect match. ","date":"2023-08-23","objectID":"/blog/shader-ls/:1:0","tags":["LSP"],"title":"Shader Language Server (LS)","uri":"/blog/shader-ls/"},{"categories":["LSP"],"content":"üíÄ C# Language Server Protocal Hell I already had a bad feeling when writing a language server in C# before starting it since I never had a good impression of the author Omnisharp‚Äôs plugins. I‚Äôve tried their official C# plugins on the VSCode Marketplace, but to be honest, I wouldn‚Äôt say I like it. Here are a few reasons why: It‚Äôs slow Constant breaking changes. Next update nothing works! Maintainers are not very active (but the community is friendly though) Nevertheless, I insist on giving csharp-language-server-protocol a shot since there are no other reasonable alternatives. After digging it for a few days, here are issues I am facing: Example from the official repository is either broken or incomplete (kinda useless) Obsolete or lack of documentation They don‚Äôt really care about other editors. (Many editor compatible issues and PRs are left opened) Fortunately, I found the thousand language server created by @gulbanana and HlslTools created by @tgjones. Therefore, I am able to accomplish this project by seeing their implementations! üòÖüòá P.S. It took me very long to figure things out!!! üíÄ ","date":"2023-08-23","objectID":"/blog/shader-ls/:2:0","tags":["LSP"],"title":"Shader Language Server (LS)","uri":"/blog/shader-ls/"},{"categories":["LSP"],"content":"‚öôÔ∏è Plug-in ShaderlabVS Another challenge is the engine of the language server. What parses the text document and gives reasonable responses to the client? Then I found a project that already does that for me ‚Äì ShaderlabVS. It‚Äôs an ideal solution since the implementation are also in C#. Thanks to the author @wudixiaop for this amazing project! ‚ù§Ô∏è ","date":"2023-08-23","objectID":"/blog/shader-ls/:3:0","tags":["LSP"],"title":"Shader Language Server (LS)","uri":"/blog/shader-ls/"},{"categories":["LSP"],"content":"üí• Create a language server client Okay, now we have a language server up and running, but there is no way to test it! I‚Äôm an Emacs user, so I‚Äôve decided to create an Emacs package ‚Äì lsp-shader that uses lsp-mode as the base and use it as my language server‚Äôs client. I‚Äôve already created several language server‚Äôs clients in Emacs Lisp, so creating another isn‚Äôt too difficult. üòÅ ","date":"2023-08-23","objectID":"/blog/shader-ls/:4:0","tags":["LSP"],"title":"Shader Language Server (LS)","uri":"/blog/shader-ls/"},{"categories":["LSP"],"content":"üì¶ Publish on NuGet I have no experience publishing packages to NuGet, but it wasn‚Äôt hard after watching a couple of tutorials on YouTube. I use the csharp-language-server created by @razzmatazz as my reference since this is the only project I know with a similar structure I want. In closing, you only need two step to publish package on NuGet. üòã Pack the package from Visual Studio Upload to NuGet site ","date":"2023-08-23","objectID":"/blog/shader-ls/:5:0","tags":["LSP"],"title":"Shader Language Server (LS)","uri":"/blog/shader-ls/"},{"categories":["LSP"],"content":"üéñÔ∏è Achievement Created a language server. Created Emacs language server‚Äôs client for shader-ls, lsp-shader. My first published NuGet package, see https://www.nuget.org/packages/shader-ls/. ","date":"2023-08-23","objectID":"/blog/shader-ls/:6:0","tags":["LSP"],"title":"Shader Language Server (LS)","uri":"/blog/shader-ls/"},{"categories":["Editor"],"content":"‚ö†Ô∏è The intention of this post is to remind myself why Emacs isn‚Äôt worth my time anymore. I‚Äôve been using Emacs since 2015. I have developed more than 150 elisp packages, and maintained over 200 packages (including my packages). It‚Äôs been a long journey staying in the Emacs community, I think it‚Äôs a good for me to slow myself down and step back a little and think what I‚Äôve accomplished through out these years. ","date":"2023-07-08","objectID":"/blog/long-journey-with-emacs/:0:0","tags":["Editor","Emacs"],"title":"Long Journey with Emacs","uri":"/blog/long-journey-with-emacs/"},{"categories":["Editor"],"content":"üí´ How I got into Emacs? Many people asked me this question, so I decided to reply it here. I first saw Emacs is at 2015, seeing Casey Muratori‚Äôs Handmade Hero series. I was blown away by how fast he can code in Emacs. How he can jump to other window and never leave the keyboard are all new to me. But if I look at his configuration now, it‚Äôs actually not so great. He doesn‚Äôt use any third-party packages, so he has every defined in his own configuration file (~/.emacs file). The configuration can still be great without using those third-party packages, but it will only limit you and remake the wheel that maybe others have already done for you. Besides all of that, Casey is still a top-tier programmer I have known in my whole life. ‚ù§Ô∏è ","date":"2023-07-08","objectID":"/blog/long-journey-with-emacs/:1:0","tags":["Editor","Emacs"],"title":"Long Journey with Emacs","uri":"/blog/long-journey-with-emacs/"},{"categories":["Editor"],"content":"üí´ How much I‚Äôve put my time to Emacs? Like I‚Äôve mentioned above, trust me. I put in a lot of time to accomplish what I‚Äôve done for the Emacs community. If you search all my packages, I hold the most packages in MELPA. The time I have put kinda proof how much I love Emacs, but also how much I get disappointed with Emacs. üò• ","date":"2023-07-08","objectID":"/blog/long-journey-with-emacs/:2:0","tags":["Editor","Emacs"],"title":"Long Journey with Emacs","uri":"/blog/long-journey-with-emacs/"},{"categories":["Editor"],"content":"üí´ Why Emacs isn‚Äôt the worth my time anymore? First of all, there is nothing wrong with the Emacs' devel. They did a great job keeping Emacs alive, and I like their mentality and most of their technical decisions. For me, the problem is the Elisp dev ecosystem (not the Emacs community itself; consider the Elisp dev ecosystem is the subset of the Emacs community). I appreciate people willing to contribute to Emacs, but I hate when they don‚Äôt consider their packages' cross-platform capability. Yes, I‚Äôm a Windows user; actually, I use all the most used systems (Linux, macOS, and Windows). I hate that when I try a package, it only works on a specific system (excluding packages that only rely on certain systems), but it is supposed to work on all systems. I feel terrible and frustrated because most of the Elisp dev does not care or does not care enough about the minority users (Windows users). Even some famous packages don‚Äôt work well on Windows, magit is slow, straight.el is slow, helm is slow, ivy is slow, projectile is broken, eping is broken, EAF is constatly broken, etc. I use over 500 packages in my configuration. I can list a ton of packages that have terrible cross-platform capability. But are they all bad? Of course not. Most of the authors show patience and are willing to help you with the issue you have encountered. At least they have tried to solve these issues and provide a workaround, etc. Like magit has a GitHub issue (magit/#2982) that explicitly talking about the Windows performance. EAF authors and maintainers constantly respond to the users they have trouble with. These projects are amazing, and I appreciate them so much! But most of them aren‚Äôt like that‚Ä¶ Unfortunately, they either don‚Äôt care or don‚Äôt care enough. In the 2020 Emacs survey, Windows users are only 8%! I‚Äôve heard a lot of people claim I‚Äôm wrong. First of all, I‚Äôm in the minority; only God knows what we think. Second of all, I wish more than anyone I am wrong. I don‚Äôt care if I‚Äôm wrong or not. I want the UX to be improved! Many people complain about the OS (Windows), suggest using the WSL, etc. But that‚Äôs not the issue. Ignoring the issue is the issue! If you can‚Äôt solve the issue from another platform, don‚Äôt blame the platform. Blame yourself! There are no bad systems, only bad programmers (in this case). To answer my own question, I am tired of being in the minority. It‚Äôs laborious and tedious. I‚Äôm tired of complaining to other Elisp dev. For people that know me, you know I hate to say all this. It‚Äôs sad and hopeless. Why bother? You might have known why I put so much time into Emacs. I‚Äôm only filling the gap between Unix-like systems and Windows. And yes, all my packages work across all platforms. ","date":"2023-07-08","objectID":"/blog/long-journey-with-emacs/:3:0","tags":["Editor","Emacs"],"title":"Long Journey with Emacs","uri":"/blog/long-journey-with-emacs/"},{"categories":["Editor"],"content":"üí´ Will I leave Emacs community? The short answer is no. I will most likely not going to develop more Emacs packages anymore; unless I really want to. But I will continue to maintain all the packages I‚Äôm currently maintaining since I will continue to use Emacs for my future work! ","date":"2023-07-08","objectID":"/blog/long-journey-with-emacs/:4:0","tags":["Editor","Emacs"],"title":"Long Journey with Emacs","uri":"/blog/long-journey-with-emacs/"},{"categories":["Editor"],"content":"‚öúÔ∏è Conclusion I didn‚Äôt know the article would be this long. It‚Äôs been a very long journey for me. I have learned a lot from this community and know many great people. I appreciate people who use my packages and those who do care the minority users like me. ‚ù§Ô∏èüôè ","date":"2023-07-08","objectID":"/blog/long-journey-with-emacs/:5:0","tags":["Editor","Emacs"],"title":"Long Journey with Emacs","uri":"/blog/long-journey-with-emacs/"},{"categories":["Editor"],"content":"What‚Äôs the fastest ELPA? Let‚Äôs define it first! The ELPA runs the fastest? No, that doesn‚Äôt make any sense. The ELPA serves you the fastest? Maybe. The definition for fastest ELPA in this article means it builds your packages the fastest! You might wonder why and how! Let me explain it to you! Normal ELPA, like MELPA, builds packages from the recipes directory, so it takes O(n) to do so. The more packages one ELPA holds, take longer the time to get packages to update to the server. The general solution is to use a more powerful PC to reduce the build time. Here comes JCS-ELPA, it uses the package github-elpa to host packages on the GitHub pages! But why is it the fastest LEPA? There are two factors: Microsoft owns GitHub so technically we serve our ELPA on Microsoft‚Äôs server We build packages using GitHub Actions with multiple jobs (if you are unfamiliar with GHA, think as multiple PCs helping you build your packages) JCS-ELPA builds your packages with multiple jobs simultaneously! The formula: New build time = Original Build time / jobs If jobs is equal to 1, then the new build time equals to original build time (no build time improvement). For example, if original build time is 10 minutes, and we start 3 jobs, the new build time will be 2 minutes. 2 min = 10 min / 5 jobs Of course, this is not going to happen in the real life. In reality, we will need to consume time on job scheduling, starting and closing time for the jobs, etc. But in theory, the more packages the ELPA holds, you will see the big differences between these two models. ","date":"2023-04-10","objectID":"/blog/fastest-elpa/:0:0","tags":["Editor","Emacs","ELPA"],"title":"Fastest ELPA","uri":"/blog/fastest-elpa/"},{"categories":["Editor"],"content":"üë∑ How does it work? üí° Here we only explain how it works sine there aren‚Äôt enough packages to proof this ELPA is the fastest! As of right now, there are only 136 packages hosted on JCS-ELPA. I have split these recipes into smaller sections. Let‚Äôs say 50 per section! The formula will be: jobs = (total recipes / recipes per section) + 1 Hence: 3 = (136 / 50) + 1 Now you have 3 workers to help you build packages onto our server! The original build time was 4 to 5 minutes, now it‚Äôs 1.5 minutes! What a big improvement! üòÑ One of the coolest things is you can see what happens directly through the GHA‚Äôs log! ","date":"2023-04-10","objectID":"/blog/fastest-elpa/:1:0","tags":["Editor","Emacs","ELPA"],"title":"Fastest ELPA","uri":"/blog/fastest-elpa/"},{"categories":["Editor"],"content":"I‚Äôve developed more than 50 elisp packages, and maintain 100 or more of them. Developing an elisp package isn‚Äôt easy for a beginner, especially for those who want to publish their package to an ELPA. e.g., GNU Elpa, NonGNU Elpa, MELPA, etc. That‚Äôs why I use Eask to help me develop elisp packages. Therefore, in this article, I‚Äôm going to teach people how to use this tool to help you build your own elisp packages! üòÑ ","date":"2023-04-10","objectID":"/blog/emacs-eask-101/:0:0","tags":["Editor","Emacs"],"title":"Emacs Eask 101 - Build tool","uri":"/blog/emacs-eask-101/"},{"categories":["Editor"],"content":"üó®Ô∏è Trouble using Eask Eask now has more than 50 commands (including hidden ones). The tool is fairly complex so the first thing you need to know is to use --help when have trouble using this tool. $ eask --help ","date":"2023-04-10","objectID":"/blog/emacs-eask-101/:1:0","tags":["Editor","Emacs"],"title":"Emacs Eask 101 - Build tool","uri":"/blog/emacs-eask-101/"},{"categories":["Editor"],"content":"üì¶ Build the package Here we jump right into the package development. I assumed you already know how to create Eask-file and want to use this tool effectively right a way. I‚Äôm going to use an existing elisp package I‚Äôve created openai.el just to show the workflow. # Clone the project $ git clone https://github.com/emacs-openai/openai.git # Navigate to project directory cd sideline # (Optional) Print the folder structure tree /f The project structure looks like this: ‚îÇ .dir-locals.el ‚îÇ .gitignore ‚îÇ CHANGELOG.md ‚îÇ Eask ‚îÇ LICENSE.txt ‚îÇ Makefile ‚îÇ openai-audio.el ‚îÇ openai-chat.el ‚îÇ openai-completion.el ‚îÇ openai-edit.el ‚îÇ openai-embedding.el ‚îÇ openai-engine.el ‚îÇ openai-file.el ‚îÇ openai-fine-tune.el ‚îÇ openai-image.el ‚îÇ openai-model.el ‚îÇ openai-moderation.el ‚îÇ openai.el ‚îÇ README.md ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ.github ‚îî‚îÄ‚îÄ‚îÄworkflows test.yml We first build the package with: $ eask package This command will create a folder dist, and here is the result: Noticed this is a multi-file package so it‚Äôs built into a tar file. If we inspect the tar file, then this is the result: ","date":"2023-04-10","objectID":"/blog/emacs-eask-101/:2:0","tags":["Editor","Emacs"],"title":"Emacs Eask 101 - Build tool","uri":"/blog/emacs-eask-101/"},{"categories":["Editor"],"content":"‚öô Install it Now you have created the package successfully, it means your package will have no issue hosting on any ELPA (GNU Elpa, MELPA, etc.). People can download your package on the ELPA you like to host. The next step is to test installing the package. It‚Äôs meaningless if people can download your package but aren‚Äôt able to install it. We install the package with the install command: $ eask install The package is installed in an isolated environment, so it won‚Äôt create any side effects to your personal configuration ~/.emacs.d/. Here is the result: ","date":"2023-04-10","objectID":"/blog/emacs-eask-101/:3:0","tags":["Editor","Emacs"],"title":"Emacs Eask 101 - Build tool","uri":"/blog/emacs-eask-101/"},{"categories":["Editor"],"content":"üìã Activate in runtime The activation test is simple, we normally want to check if your package will run correctly on your user‚Äôs machine. $ eask test activate You should see the following output: Loading package information... done v Activating the package `openai'... succeeded v (Nothing to load.) Great! It means our package has been activated without any error! üòã This step is generally optional, but it‚Äôs good to know if you will encounter any runtime errors! ","date":"2023-04-10","objectID":"/blog/emacs-eask-101/:4:0","tags":["Editor","Emacs"],"title":"Emacs Eask 101 - Build tool","uri":"/blog/emacs-eask-101/"},{"categories":["Editor"],"content":"üë∑ Compile it! It‚Äôs time to compile your package! Compile step is the same as the install step. The only difference is it won‚Äôt need to be built (eask package) to test to see if your package will install correctly. Therefore, compile step is very helpful since we don‚Äôt always want to build the package for every change we have made. $ eask compile And yes, it compiles successfully without any errors! üòã Compiling d:/_workspace/elisp/openai/openai.el... done v Compiling d:/_workspace/elisp/openai/openai-audio.el... done v Compiling d:/_workspace/elisp/openai/openai-chat.el... done v Compiling d:/_workspace/elisp/openai/openai-completion.el... done v Compiling d:/_workspace/elisp/openai/openai-edit.el... done v Compiling d:/_workspace/elisp/openai/openai-embedding.el... done v Compiling d:/_workspace/elisp/openai/openai-engine.el... done v Compiling d:/_workspace/elisp/openai/openai-file.el... done v Compiling d:/_workspace/elisp/openai/openai-fine-tune.el... done v Compiling d:/_workspace/elisp/openai/openai-image.el... done v Compiling d:/_workspace/elisp/openai/openai-model.el... done v Compiling d:/_workspace/elisp/openai/openai-moderation.el... done v (Total of 12 files compiled, 0 skipped) ","date":"2023-04-10","objectID":"/blog/emacs-eask-101/:5:0","tags":["Editor","Emacs"],"title":"Emacs Eask 101 - Build tool","uri":"/blog/emacs-eask-101/"},{"categories":["Editor"],"content":"‚öúÔ∏è Conclusion These are the basic uses of Eask, but there are more things that Eask can do. Like lint your package, run tests suite, or package management, etc. But we can cover these within the next chapter. This is the result of all the commands we have used in this article: eask package # Build package artifect (installable file) eask install # Install installable file eask test activate # Test package activation eask compile # Source code compilation ","date":"2023-04-10","objectID":"/blog/emacs-eask-101/:6:0","tags":["Editor","Emacs"],"title":"Emacs Eask 101 - Build tool","uri":"/blog/emacs-eask-101/"},{"categories":["Server"],"content":"I have always been using AWS as my main web hosting choice. But I have come to the point that I reckon the price and services aren‚Äôt something that I need. Therefore, I have decided to switch to another web hosting company just for another taste. The main reasons are listed below: AWS charges you money when you click on their services without notifying the user. I dislike how it functions. The price is too high, plus I don‚Äôt really need it UI is awful, and UX is bad Jargons aren‚Äôt transferable (I‚Äôm picky) Now, let‚Äôs move into details. ","date":"2022-09-10","objectID":"/blog/first-server-migration/:0:0","tags":["Server","migration"],"title":"First server migration","uri":"/blog/first-server-migration/"},{"categories":["Server"],"content":"üìã Transfer the domain name The target domain I am transferring is jcs-profile.com . If we checked who.is; the registrar is amazon.com. I bought the domain name using AWS‚Äôs Route 53. But now, I would like to transfer it to Namecheap . This isn‚Äôt the cheapest choice, but I like their UI/UX. It‚Äôs simpler and looks much more organized compared to AWS‚Äôs UI. I watched the below video when I was picking my new domain name registrar. I attempted to use Google Domains since it‚Äôs the best choice from the video, but it came out it doesn‚Äôt support my country/region, Taiwan (WIP). So I go for the second best choice, which is Namecheap. üòÖ Craylor Made explains very well! Big thanks to him! NOTE: It took them 5 days to complete transfer. So I‚Äôll have to wait until the transfer is completed! ","date":"2022-09-10","objectID":"/blog/first-server-migration/:0:1","tags":["Server","migration"],"title":"First server migration","uri":"/blog/first-server-migration/"},{"categories":["Server"],"content":"üìÇ Transfer data Transfer data is easy, I use FileZilla (as always) to download all the files I need to move over to the new server. Unlike Node, PHP, or MySQL; there isn‚Äôt much environment I need to set up (except the Nginx) . We would just have to ensure don‚Äôt ever close the old server until we have moved everything to the new server! Something I always want to try out is the Docker migration. It sounds like fun to me! But I guess I will have to wait until next time I get the opportunity.üôÇ ","date":"2022-09-10","objectID":"/blog/first-server-migration/:0:2","tags":["Server","migration"],"title":"First server migration","uri":"/blog/first-server-migration/"},{"categories":["Server"],"content":"ü©π Restart our server I have chosen DigitalOcean as my new web hosting company. Reasons are: cheaper (relative to aws) Easier to see what is charged and what not Excellent UI Documentation is great; the community seems to be friendly The only defect is the server‚Äôs location, and there aren‚Äôt many locations to choose. First thing first, after transferring all the data. We need to update the name servers so it can be redirected to the correct IP address. The following video says it all. It‚Äôs amazing! The old name servers from AWS, ns-1375.awsdns-43.org ns-1685.awsdns-18.co.uk ns-804.awsdns-36.net ns-93.awsdns-11.com The new name servers from DigitalOcean, ns1.digitalocean.com. ns2.digitalocean.com. ns3.digitalocean.com. Then we need to modify the DNS Records from DigitalOcean‚Äôs website. We add @ and www points to our new server (IP). Type Hostname Value TTL(seconds) A @ IP address 3600 (default) A www IP address 3600 (default) Then we are done! Hurray!~ ü•≥üéâüéä ","date":"2022-09-10","objectID":"/blog/first-server-migration/:0:3","tags":["Server","migration"],"title":"First server migration","uri":"/blog/first-server-migration/"},{"categories":["Game Dev"],"content":"Timeline is placed in summer time, middle of July 2022, one of my friend (@henrykuh) invited me to join the Game Jam that he is going to host in Aug 2022. In the meantime, he has also invited me to rejoin the community MatchWorkshop , and become the headmaster of the Game Programming deparetment. Therefore, this Game Jam is treated as an opportunity to collaborate with other headmaster from other department in this community. üòï I believe networking is a massive part of the Game Jam; hence I have decided to join the event without too much hesitation. This Game Jam came in just about the right time since I just ended another project last month. ","date":"2022-08-29","objectID":"/blog/game-jam-aug-2022/:0:0","tags":["Game Dev"],"title":"Game Jam - Aug 2022","uri":"/blog/game-jam-aug-2022/"},{"categories":["Game Dev"],"content":"‚ùì About Game Jam Game Jam‚Äôs full name are 5th DIY Game Jam: Surprise. This is hosted by DIY GM. Entire event is about 1 month, it‚Äôs a lot longer compare to regular Game Jams due to the COVID-19. The theme is already announced through the title, surprise. ","date":"2022-08-29","objectID":"/blog/game-jam-aug-2022/:0:1","tags":["Game Dev"],"title":"Game Jam - Aug 2022","uri":"/blog/game-jam-aug-2022/"},{"categories":["Game Dev"],"content":"üî∞ Joined! Meet the team I was in the MatchWorkshop community once a while ago, but we didn‚Äôt have time and a chance to get to know each other well. This is the right time for me to network with other people who already have working experience in Taiwan‚Äôs Game Industry. Team and role are listed below: Kyrie ÔºàGame DesingerÔºâ Yi Ôºà3D ArtistÔºâ ÈªëÊîª Ôºà2D Artist„ÄÅComposerÔºâ ÁâπÈáåÊñØÂç° Ôºà2D ArtistÔºâ Jen-Chieh Shen ÔºàEngineerÔºâ \u003c- That‚Äôs me! üòé I reckon Yi and Kyrie are two essential pieces in this group. Without their contribution, our game will simply be a disaster. Yi is responsible for making our characters (Minions and Alice) look alive, which requires countless hours to accomplish such a heavy task. Kyrie made a decent GDD, and shows his passion during the entire Game Jam. What about Jen-Chieh (me)? He made the entire game (programming-wise) within 24 hours. It could be impressive but expected. üôÇ All I want to say is THANK YOU to the group! ","date":"2022-08-29","objectID":"/blog/game-jam-aug-2022/:0:2","tags":["Game Dev"],"title":"Game Jam - Aug 2022","uri":"/blog/game-jam-aug-2022/"},{"categories":["Game Dev"],"content":"üí° Design, and Programmer View First of all, I didn‚Äôt come up with the game idea. The game design had been established before I joined the team. Therefore, I will only talk about the game-making (engineering) part of the game. Here are some issues that I think are worth mentioning for the record: GDD is incomplete, lack of details We don‚Äôt know who came up with the idea? (even at the very end of the event) No core design principles, game idea could not be established Nice reminder, this is NOT for me to blame on anyone in the group. I am simply pointing it out to help myself do better in the future. Anyways, we eventually made the game! Congratulation! üéâüéä Seeing the finished game always makes me feel good! ‚ú® ","date":"2022-08-29","objectID":"/blog/game-jam-aug-2022/:0:3","tags":["Game Dev"],"title":"Game Jam - Aug 2022","uri":"/blog/game-jam-aug-2022/"},{"categories":["Game Dev"],"content":"üñºÔ∏è Screenshots ","date":"2022-08-29","objectID":"/blog/game-jam-aug-2022/:0:4","tags":["Game Dev"],"title":"Game Jam - Aug 2022","uri":"/blog/game-jam-aug-2022/"},{"categories":["Game Dev"],"content":"üí¨ Conclusion Let‚Äôs move on to the conclusion; I sense this project is great compared to many games that have been submitted to the same event. Even though the game isn‚Äôt a complete complete game, but it has everything a game needs, and there are more details in the game. I am proud of myself in this event! üëç The only thing I have in mind so the game can be more inclusive is that we don‚Äôt have time to debug and playtest more. I wish we could have more time or improve our time management during the event! üôè ","date":"2022-08-29","objectID":"/blog/game-jam-aug-2022/:0:5","tags":["Game Dev"],"title":"Game Jam - Aug 2022","uri":"/blog/game-jam-aug-2022/"},{"categories":["Game Dev"],"content":"üîó Links Game: Alice In Surprise Game Jam DIY GM MatchWorkshop ","date":"2022-08-29","objectID":"/blog/game-jam-aug-2022/:0:6","tags":["Game Dev"],"title":"Game Jam - Aug 2022","uri":"/blog/game-jam-aug-2022/"},{"categories":["Editor"],"content":"üî∞ Introduction The name Eask came from Emacs Cask ; if you already know what Cask is and what it does, please skip this and forward to the next section. (NOTE: Cask and Eask are interchangeable in this section) Eask is the dependency management tool for Emacs Lisp. It‚Äôs like npm to Node.js; but it isn‚Äôt exactly the same since Eask has fewer tools than npm, plus their ecosystems are slightly different. Below is the link Why Cask? has a better explanation. Why Cask? ","date":"2022-05-29","objectID":"/blog/emacs-eask/:0:1","tags":["Editor","Emacs"],"title":"Emacs Eask - Alternative to Emacs Cask","uri":"/blog/emacs-eask/"},{"categories":["Editor"],"content":"‚ùì Then why Eask, and not Cask? A simple comparison table below: Behind technology Cross-Platform Emacs Version Size Cask Bash, Batch, and Python (Windows) ‚ùå Good on Linux and macOS, but it‚Äôs particularly bad on Windows 24.5+ 3,000+ lines makem.sh Shellscript ‚ùå Doesn‚Äôt work on Windows by default 26.1+ 1 file, 1200+ lines Eldev Bash, Batch, and Powershel, etc ‚úî Good, but qutie slow on Windows 24.4+ 4,000+ lines Eask Node or Native Executables ‚úî Good, and it can be compiled to native executables 26.1+ 3,000+ lines (Table is copy and paste, please visit the site here) Eask‚Äôs advantages came from the behind technology choice; it uses Node.js and not Shellscript, Bash, Batch, etc. It would require us to use Node runtime, but we can use pkg (big thanks to vercel) for packaging into native executable to avoid such a hassle. I hope the needs to install Node.js and the extra step to call npm install are the only defect from Eask. So what are the GOODS stuff? Eask can be packaged into native executables; it should give you a better speed! It uses Cask‚Äôs DSL; it became very easy to adapt from Cask to Eask Eask-file is unlike Cask-file; it‚Äôs an Elisp file and functions similar to init.el (combined from Cask + Eldev) Use high-level programming language JavaScript; npm has a huge ecosystem. We can always fall back to the node layer if something doesn‚Äôt work inside Emacs (e.g. exec, init) Eask uses yargs as their CLI parsing library, which makes us only have to focus on the development Eask doesn‚Äôt require to call Emacs all the time; this is particularly good in Windows due to the fork operation is quite slow in the system (this is why I don‚Äôt recommend Eldev under Windows) Cross-platform and consistency; other alternatives don‚Äôt support Windows by default except for Eldev It‚Äôs easy to expand, and clearer project architecture; Cask, Eldev, and makem.sh have their files very huge, so it would be harder to maintain or add new features Global flag -g allows you to manage your Emacs configuration Eask sounds good, but it isn‚Äôt perfect. Here are the BADS: Harder to get into the development; you will need to know JavaScript and npm Eask project structure follows 1 command to 1 file; people hate having multiple files everywhere The project is much more complicated (same as no. 2) ","date":"2022-05-29","objectID":"/blog/emacs-eask/:0:2","tags":["Editor","Emacs"],"title":"Emacs Eask - Alternative to Emacs Cask","uri":"/blog/emacs-eask/"},{"categories":["Editor"],"content":"üßô‚Äç‚ôÇÔ∏è Conclusion After seeing and comparing all the alternatives; I would eventually pick Eask as my major management tool. Eask has more potential if we compare it to the others; on the other hand, I think JavaScript and npm are very easy to learn. I have been using Emacs on Windows for 7 years; it‚Äôs quite painful. In general, many packages are either broken or doesn‚Äôt have a good user experience. I sometimes do have a good user experience but rarely. For example, magit, helm, is slow on Windows. Simple ping package eping doesn‚Äôt support Windows' ping.exe. Last time installing docker.el doesn‚Äôt work on Windows (1 week ago). I know the fact is Emacs is just too slow on Windows, but that doesn‚Äôt mean that we couldn‚Äôt do anything about it! The fact is user experience is still bad on Windows, though! üòÖ Many people seem to use Cask, but the majority of them don‚Äôt require tests on Windows. It‚Äôs simply hard and inconvenient. You would have to install Python, and Python is particularly bad on Windows (UX wise). Here came the Eask to be the savior. It‚Äôs compatible with Cask‚Äôs DSL and ensures the workflow‚Äôs consistency (no Python). Hopefully, everyone can use Eask to develop their elisp packages. Maybe someday Emacs can live better under the Windows‚Ä¶ What do you think? I‚Äôve also learned Hugo; would love to share it one day! ","date":"2022-05-29","objectID":"/blog/emacs-eask/:0:3","tags":["Editor","Emacs"],"title":"Emacs Eask - Alternative to Emacs Cask","uri":"/blog/emacs-eask/"},{"categories":["Editor"],"content":"üîó Links https://github.com/emacs-eask/eask ","date":"2022-05-29","objectID":"/blog/emacs-eask/:0:4","tags":["Editor","Emacs"],"title":"Emacs Eask - Alternative to Emacs Cask","uri":"/blog/emacs-eask/"},{"categories":["Web"],"content":"I‚Äôm recently hooked by the static site generator, hence I have decided to create one for myself. Why not? The huge reason is that I could host the site using the GitHub‚Äôs static site hosting services, but the one I have previously created in 2018 API-Reference-Template. is server base, which is not generator base. The static site generator isn‚Äôt hard to create, the most valuable technology is the frontend and UI/UX. However, I have already created the frontend for my own use. The main task for me would just have to extract the server base to generator base. I have also renamed the tool to SiraDoc, so then I‚Äôm able to use it for other sites as well! Just like the previous website, yet a lot easier and more suitable for the GitHub Actions' environment! üòâ ","date":"2021-09-26","objectID":"/blog/first-static-site-generator/:0:0","tags":["Web","generator"],"title":"First static site generator","uri":"/blog/first-static-site-generator/"},{"categories":["Web"],"content":"üîó Link https://github.com/SiraDoc/SiraDoc ","date":"2021-09-26","objectID":"/blog/first-static-site-generator/:1:0","tags":["Web","generator"],"title":"First static site generator","uri":"/blog/first-static-site-generator/"},{"categories":["Unity"],"content":"Following up the thread, My disappointing experience using Unity in a CI pipeline is also the biggest obstacle for me as well. Personal license (free version) of Unity will expire in a period of time depends on your region. The licensing system from Unity is partially contradict to the CI/CD concept since it will force the user to update their secret UNITY_LICENSE on their GitHub Actions. (Notice this does not apply to Plus/Pro users because they use a different licensing system!) üòñ Let‚Äôs go straigt forward to the problem, what should we do about it? And what can be improved by this situation? My approach is to automate the licesning task, but how? Long story short, I came up with a node package unity-license-activate that is originally created by Mizo Take. The package uses a package named Puppeteer, meaning we can control browser through normal JavaScript! That is awesome, the biggest issue has been resolved! üòÅ Next step, we just have to update our secret UNITY_LICENSE through GitHub‚Äôs API! The tasks are simple, we only need two following GitHub actions. read-file-action, by Julian Gruber actions-set-secret, by Habid Enrique Manzur Restrepo We can use read-file-action to read the downloaded .ulf file into memory, then we can use that as a value for our actions-set-secrets. Make sure you have added a secret ACCESS_TOKEN to your repository environment. It‚Äôs needed for creating/updating your GitHub secret from the workflow! The full workflow file can be accessed through here. ","date":"2021-09-25","objectID":"/blog/automate-personal-license-activation-in-unity-ci/:0:0","tags":["Unity","CI/CD"],"title":"Automate Personal License Activation in Unity CI","uri":"/blog/automate-personal-license-activation-in-unity-ci/"},{"categories":["Unity"],"content":"üîê Two Factor Authentication (TFA) unity-license-activate may not work since Unity would require you to enter a 6 digit verification code from your email. To get pass this, you would have to install unity-verify-code in your workflow and follow the steps here. ","date":"2021-09-25","objectID":"/blog/automate-personal-license-activation-in-unity-ci/:1:0","tags":["Unity","CI/CD"],"title":"Automate Personal License Activation in Unity CI","uri":"/blog/automate-personal-license-activation-in-unity-ci/"},{"categories":["Unity"],"content":"üîó Links unity-license-activate unity-verify-code ","date":"2021-09-25","objectID":"/blog/automate-personal-license-activation-in-unity-ci/:2:0","tags":["Unity","CI/CD"],"title":"Automate Personal License Activation in Unity CI","uri":"/blog/automate-personal-license-activation-in-unity-ci/"},{"categories":["Career"],"content":"WIP WIP ","date":"2021-09-15","objectID":"/blog/why-i-left-usyd/:0:0","tags":["Career","Education"],"title":"Why I left USYD","uri":"/blog/why-i-left-usyd/"},{"categories":["Career"],"content":"üí¨ Past experience WIP ","date":"2021-09-15","objectID":"/blog/why-i-left-usyd/:1:0","tags":["Career","Education"],"title":"Why I left USYD","uri":"/blog/why-i-left-usyd/"},{"categories":["Career"],"content":"üò® Puzzled WIP ","date":"2021-09-15","objectID":"/blog/why-i-left-usyd/:2:0","tags":["Career","Education"],"title":"Why I left USYD","uri":"/blog/why-i-left-usyd/"},{"categories":["Career"],"content":"‚ùó Awakening WIP ","date":"2021-09-15","objectID":"/blog/why-i-left-usyd/:3:0","tags":["Career","Education"],"title":"Why I left USYD","uri":"/blog/why-i-left-usyd/"},{"categories":["Career"],"content":"üí¨ Future WIP ","date":"2021-09-15","objectID":"/blog/why-i-left-usyd/:4:0","tags":["Career","Education"],"title":"Why I left USYD","uri":"/blog/why-i-left-usyd/"},{"categories":["Philosophy"],"content":"This is a record, a message from me to one of my ex-firned. The talked was, 2020-05-06 While you are in a dilemma, we humans are totally normal to be afraid of it. This may be a process; afraid makes us strong and a much more experienced people. Humans suppose to grow like that! So let it be! Once you are afraid of something, don‚Äôt give up on trying it; think about the issue, think as hard as you can, and try to resolve it! Even if we couldn‚Äôt resolve the issue, it doesn‚Äôt mean we are bad, or the issue can‚Äôt be resolved in the later future. We are often weak while facing problems that are just too tough for us humans. We grow only when the dilemma is just right above us. We can‚Äôt simply level up by skipping it. Avoiding the issue/weaknesses doesn‚Äôt mean anything; I have been studying English for more than 20 years, but then I finally have the proof that I could get into a college ranked in the first fifteenth. I have realized that avoiding the dilemma doesn‚Äôt affect you from any aspect because I have come and eventually resolved it! Everyone has the time that they got beaten up. All we need to do is stand up and move on to the next adventure. We all grow that way, so you are simply not alone. You are, I am, all of us are. No one is invincible until they notice this. ","date":"2020-05-06","objectID":"/blog/%E9%81%87%E5%88%B0%E5%9B%B0%E9%9B%A3/:0:0","tags":["Philosophy","delima"],"title":"In a dilemma","uri":"/blog/%E9%81%87%E5%88%B0%E5%9B%B0%E9%9B%A3/"},{"categories":["Others"],"content":"Productivity is topic that often is ignored by a lot programmer. I have seen a bunch of documents out there talking about algorithm and data structure, so I would like to post a topic about productivity for an advanced programmer or for the programmer who wants to be a better programmer. So what exactly mean productivity in software development field? If you have seen my previous blog post ' Framework I have been working‚Ä¶ (Part 1) ' and ' Framework I have been working‚Ä¶ (Part 2) ‚Äò, then you might already know what I am going to write about for the rest of this article. So what essentially methods that we could do to improve the productivity for ourselves as a software engineer? First of all, I would say build your tools. Anything that could speed up the development process will increase the productivity of the project. It sounds straightforward to make your tools or library, but when you start making it, it actually kind of hard to make. That I have heard of a lot of people asking me how to make a library for other people to use? Building a tool is hard and time-consuming. The first thing to make your tool is to have learned Design Pattern (I have already mentioned few books I recommend in my previous post - ' Framework I have been working‚Ä¶ (Part 1) ‚Äò). Attention, learn design pattern is to learn how to build a better software architecture. Not to learn how to use a design pattern in your code! I have seen programmers use design pattern all the time and feel bad about it because they seem to be attempt to use design pattern instead of designing a software architecture. Once you have the skill and knowledge of design pattern. I would recommend seeing how other people build their tools on any open source platform. As everyone knows GitHub, GitLab, SourceForge, etc. Designing tools are thinking about how to make other programmers feel comfortable when using your tool. Think what kind of params have to pass into this function? Think is this feature that is needed to be here/design? ","date":"2019-12-16","objectID":"/blog/what-i-am-about-to-do/:0:0","tags":["Others"],"title":"What I am about to do","uri":"/blog/what-i-am-about-to-do/"},{"categories":["Game Dev"],"content":"When get started to the game development, people will somehow face some sort of situation that they will need to determine what they are going to master to do in the development. The game development are mainly split into three careers, which are ‚ÄòArt‚Äô, ‚ÄòDesign‚Äô, and ‚ÄòProgramming‚Äô. These three jobs are very different to one the other. The best method to figure it out what you want to do is to try all them all out one at a time. If your situation would not allow you to do so, ","date":"2019-11-12","objectID":"/blog/art-design-programming/:0:0","tags":["Game Dev"],"title":"Art, Design, Programming","uri":"/blog/art-design-programming/"},{"categories":["Game Dev"],"content":"WIP ","date":"2019-11-12","objectID":"/blog/programming-in-game/:0:0","tags":["Game Dev"],"title":"Programming In Game","uri":"/blog/programming-in-game/"},{"categories":["Legacy"],"content":"Demo: http://www.jcs-profile.com:3000/Manual/index.html GitHub Repo: https://github.com/jcs090218/API-Reference-Template Many of my works are about making API. I always have their trouble making API documents for myself and for people to read what each API does. To resolve this issue, I spent a few hours to design a small website that I could drop the HTML file in the target folder and it will show the file on the website. The following list is the list of technologies I used in the project. ","date":"2018-11-12","objectID":"/blog/api-reference-template/:0:0","tags":["Legacy"],"title":"API Reference Template","uri":"/blog/api-reference-template/"},{"categories":["Legacy"],"content":"Frontend Basic HTML/CSS Basic JavaScript and jQuery ","date":"2018-11-12","objectID":"/blog/api-reference-template/:0:1","tags":["Legacy"],"title":"API Reference Template","uri":"/blog/api-reference-template/"},{"categories":["Legacy"],"content":"Backend Express.js ","date":"2018-11-12","objectID":"/blog/api-reference-template/:0:2","tags":["Legacy"],"title":"API Reference Template","uri":"/blog/api-reference-template/"},{"categories":["Legacy"],"content":"Examples JCSUnity Scripting Reference JCSEgret Scripting Reference ","date":"2018-11-12","objectID":"/blog/api-reference-template/:1:0","tags":["Legacy"],"title":"API Reference Template","uri":"/blog/api-reference-template/"},{"categories":["Web"],"content":"Link: MapleStory Survival Kit This is the final project from the first class of web development from our school. I joined this class as an elective class so I could have a peek of how web development works. A list below is few highlights I would like to show from this project. Parallax Effect Use of Sound Gashapon ","date":"2018-08-14","objectID":"/blog/parallax-website/:0:0","tags":["Web","parallax"],"title":"Parallax Website","uri":"/blog/parallax-website/"},{"categories":["Web"],"content":"üëÅÔ∏è Parallax Effect Most parallax effect I have seen aren‚Äôt quite satisfied to me. Generally they will have a image at the back of other components then have it semi-stationary to sit still at the place. In this project I would like to have a peek of how CSS can do on 2016. Fortunately, after being learning animation system from CSS I am for sure that the parallax effect I was to imagine are possible to accomplish by just the CSS without using JavaScript. You can use the small panel on the top left corner to navigate through the four pages from this website. ","date":"2018-08-14","objectID":"/blog/parallax-website/:1:0","tags":["Web","parallax"],"title":"Parallax Website","uri":"/blog/parallax-website/"},{"categories":["Web"],"content":"üîä Use of Sound I did not have any experiences with using JavaScript to play sound in the web browser. I simply searched on google and see if there is a method to play sound using JavaScript. Luckly, I found a JavaScript library, ion.sound which is very simple to use and they have great demo and great examples on their website. ","date":"2018-08-14","objectID":"/blog/parallax-website/:2:0","tags":["Web","parallax"],"title":"Parallax Website","uri":"/blog/parallax-website/"},{"categories":["Web"],"content":"üéüÔ∏è Gashapon If you had visited this website, then you will know there are three gashapons on the mostleft page. Once you hover either of these gashapons, gashapon will start dropping items. This is a simple animation using pure JavaScript renders in 30 FPS. ","date":"2018-08-14","objectID":"/blog/parallax-website/:3:0","tags":["Web","parallax"],"title":"Parallax Website","uri":"/blog/parallax-website/"},{"categories":["Unity"],"content":"This is a introduction of how JCSUnity does for the game data save/load system. There are main three ways that you could do saving and loading in Unity Engine with C#. JCS_BinGameData - In binary format JCS_XMLGameData - In XML format JCS_JSONGameData - In JSON format ","date":"2018-07-03","objectID":"/blog/save-system/:0:0","tags":["Unity","system"],"title":"JCSUnity - Save System","uri":"/blog/save-system/"},{"categories":["Unity"],"content":" JCSUnity Repo: https://github.com/jcs090218/JCSUnity ","date":"2018-07-02","objectID":"/blog/overview/:0:0","tags":["Unity","framework"],"title":"JCSUnity Overview","uri":"/blog/overview/"},{"categories":["Unity"],"content":"Acknowledge I have developed this tool for 3 years. Starting from the third year of my college years. Compare to other framework I had developed, this tool have much more completeness. I have been using Unity Engine for 2 years while I decide to develop this framework. I have made cetain of games in this 2 years and I reckon I gained enough experiences to develop a framework for Unity Engine. In the retrospect, that was the time I have just done studying ‚ÄúData Structure‚Äù, ‚ÄúAlgorithms‚Äù, ‚ÄúDesign Patterns‚Äù. What I presume that Design Patterns are the vital part to a game development because game are often built by multiple components or modules. What I meant multiple are refer as really a lot of those. On the other hand, most software development would not requires that many of the systems, generally the reasons are most of the environment have been wrap or encapsulate by the former developers. For instances, .NET Frameowrk, Visual BASIC/C++/C#, NetBean Graphic, etc. On top of these concepts, this is the third framework I built. I could not remember what I built for the previous two framworks. I presume that I have some knowledge about building a framework, library, etc. At the beginning of the JCSUnity development process, I have had studied the basis of the game engine architecture but not quite fully understand the Unity Engine itself. For instance, Unity Engine‚Äôs Scripting API, and some controls specific for Unity Eninge. Because of this, you might realized some of the code or design are a bit fiddle and inconsistent. When I am writing this article, the framework itself has been developed to the state that is convoluted and hard to maintain. Within this framework, there are around 400 to 500 scripts, most of the scripts are self executed which mean a script is a component that could run by it own. By this idea, one Self-Runnable Script benefits the design and increase the variation possibility but it also brings the cost of unnecessary performance. ","date":"2018-07-02","objectID":"/blog/overview/:1:0","tags":["Unity","framework"],"title":"JCSUnity Overview","uri":"/blog/overview/"},{"categories":["Unity"],"content":"Introduction JCSUnity is a component driven framework built to allow users to quickly generate commonly used game mechanics or features. The architecture design of JCSUnity come alone to Unity Engine‚Äôs design, which makes the framework highly compatible with Unity Engine itself. Every time the Unity Engine release an update, there should not be any issues to JCSUnity. This framework increases the productivity of game developers and enhances the game development process. Base my own experiences, the game originally that would spend my 15 weeks, I could compress development time to around 3 to 4 weeks. JCSUnity has most of the game presets that Unity Engine does not usually provide. For instance, switch scene with fade in and out, background music player, automatically adjust the screen to aspect ratio, etc. With all these presets, allow the game developers are more likely can be more focus on the design of the game instead of worrying all these trivial features. ","date":"2018-07-02","objectID":"/blog/overview/:2:0","tags":["Unity","framework"],"title":"JCSUnity Overview","uri":"/blog/overview/"},{"categories":["Unity"],"content":"Self-Runnable Script Therefore, what is Self-Runnable Script? For example, here is a list of three SRSs. 1. Circle Action 2. Shake Effect 3. Wave Action Above example scripts are all self-runnable without any dependencies and will not influence to each other scripts. Base on this design patterns, how many unique behaviours if we make all these scripts interact with each other? 7 behaviours = 3 basic behaviours + (Circle Action + Shake Effect) + (Circle Action + Wave Action) + (Shake Effect + Wave Effect) + (Circle Action + Shake Effect + Wave Action) I presume if anyone who has the necessary knowledge about game engine architecture. Design the components this way could avoid decoupling between the scripts, and added the flexibility to the designers. Designers are no longer limit to specific design; they can test and play with each component easily. The side effects are this could cost a lot of additional performance and memory usage. 3 Basic Actions Êú¨Ë∫´3Á®Æ (Circle Action ÁπûÂúì + Shake Effect ÈúáÂãï) + (Circle Action ÁπûÂúì + Wave Action ‰∏ä‰∏ãÊêñÊì∫) + (Shake Effect ÈúáÂãï + Wave Effect ‰∏ä‰∏ãÊêñÊì∫) (Circle Action ÁπûÂúì + Shake Effect ÈúáÂãï + Wave Action ‰∏ä‰∏ãÊêñÊì∫) ","date":"2018-07-02","objectID":"/blog/overview/:3:0","tags":["Unity","framework"],"title":"JCSUnity Overview","uri":"/blog/overview/"},{"categories":["Unity"],"content":"Scripting Design Having the script design this way, there should be a script principle so people could contribute or extend to the project easier. I chose to use ‚ÄòHeader‚Äô attribute to accomplish this task and here are the definition of all the terminology in JCSUnity. #if UNITY_EDITOR [Header(\"** Helper Variables (JCS_ExampleScript) **\")] /// \u003csummary\u003e /// Variable only happens in developer mode, so it won't exist in the final build. Usually the helper tool in for level designer. /// \u003c/summary\u003e float helperVar = 0.0f; #endif [Header(\"** Check Variables (JCS_ExampleScript) **\")] /// \u003csummary\u003e /// Variable only for checking, do not adjust the value of the variables, but you can use to check to see the effect during runtime. /// \u003c/summary\u003e float checkVar = 0.0f; [Header(\"** Initialize Variables (JCS_ExampleScript) **\")] /// \u003csummary\u003e /// Variable only being use in game initialize time, set these kind of variable before hitting play button in order to get the result. /// \u003c/summary\u003e float initVar = 0.0f; [Header(\"** Runtime Variables (JCS_ExampleScript) **\")] /// \u003csummary\u003e /// Variable will work on both initialize time and runtime, you can adjust the variable during runtime and see the effect. /// \u003c/summary\u003e float rtVar = 0.0f; For more information, you can click here! ","date":"2018-07-02","objectID":"/blog/overview/:4:0","tags":["Unity","framework"],"title":"JCSUnity Overview","uri":"/blog/overview/"},{"categories":["Unity"],"content":"Using ‚ÄòJCS_‚Äô Filename, not Namespace In the early version of Unity, when I try to have the same file name in the project, it occurs error. To address this issue, I chose to have a particular file name prefix in front of every file in the project, which is ‚ÄòJCS_‚Äô. ","date":"2018-07-02","objectID":"/blog/overview/:5:0","tags":["Unity","framework"],"title":"JCSUnity Overview","uri":"/blog/overview/"},{"categories":["Editor"],"content":"Precisely that I am neither an Emacs nor Vim expert. I am just an amateur that knows about the two editors with just amount of knowledge. If you check out two of my Emacs and Vim repo, this could be the worst experience of all time. I hold onto an idea that the editors are just a tool. Unless there are issues that hamper or paster my workflow, I will avoid changing the configuration to my editor. Only because I am not going to remake the wheel, indeed, I am not going judge either Emacs over Vim or Vim over Emacs. Lead to the conclusion; I use Emacs more often than Vim. Before Vim users left the website, I would like to hold onto the basis, why I chose Emacs for my most frequently used text editor. First and foremost, I organized the editor users into two groups. Base on my own experiences, people who use Emacs are most likely work in the software development industry. On the other hand, the majority of Vim users works either in cybersecurity or a free hacker. The reasons are pretty much straightforward, as a software engineer, I would much appreciate Emacs' design. Emacs' architecture brings a lot more spaces and flexibilities to the software development workflow, and it maximizes the changing possibilities to the software engineer. Most of the software development is most likely to stay in a program that could likeliest achieve most of the tasks. Does it sound familiar to you? Yes, it is just another way of saying the Integrated Development Environment (IDE). Of course, Vim could possibly do what Emacs does, extends to Vim‚Äôs original design, I found that conflict Vim is an editor design for fast editing file in terminal. Comparing the two editors, Emacs had been built the way what software developer wants; Vim would most likely lose in this battle on this aspect. Vice versa, Vim are very popular to those who do not need an IDE to do their job and often require to exit text editor to jump to other software, do not even argues that Vim is moving towards to Emacs' design. Well, this leads to a problem that I could not find a good reason for having the conflict between the original design fast editing file in terminal and having multiple plugins or configurations in Vim. Though, if Vim starts moving towards to Emacs‚Äôs design, does that mean Vim will lose the advantage on fast editing file in terminal? Many of Vim users complains Emacs was too big and cost so much of its' starting time, but now they want more plugins or configurations to their Vim settings? Emacs was designed between the lightweight text editor and heavyweight IDE, resulting Emacs could not going to be faster than Vim on the starting time, but it brings benefits to people who will like a ‚Äòlightweight IDE‚Äô, it retains most functionalities from any IDE, or even better, program yourself one! If Emacs is that good why still not many people using it? The reason could be straightforward, I learned Emacs from scratch without any in-between supports like Spacemacs or Doom-emacs. I found that Emacs main website is not that friendly compared to other many sites. Plus, you could barely saw videos online that are about Emacs. Furthermore, compares to Vim‚Äôs shortcuts design, Emacs have less cognitive shortcuts consequent people having a hard time learning Emacs' shortcuts comparing learning Vim‚Äôs shortcuts. I would doubt anyone would likely to learn Emacs by having all these kind of challenges or difficulties in front of them. The learning curve is steep, and the cost of learning a new language for editing Emacs' configuration, which is EmacsLisp, could be an extra cost of time. If you notice programming language Lisp, then maybe this would be too obscure to you. In my case, I have no experience with programming language Lisp which leads me many hassles while learning EmacsLisp. I have been using Emacs for 4 years, and I still could not say that I am an expert to Emacs. I am not trying to, and I reckon developing routine is most likely imperative comparing to fixing the editor","date":"2017-12-10","objectID":"/blog/emacs-vs-vim/:0:0","tags":["Editor","Emacs","Vim"],"title":"Emacs vs Vim","uri":"/blog/emacs-vs-vim/"},{"categories":["Editor"],"content":"First the foremost, this article is all subjective opinions by me, and there are all kind of text editor for any kind of programmer. I think some programmer have some kind of religion, so I am not going to tell anyone to use any particular text editor. I believed text editor is just tool to help programmer make a software and get their job done. At my previous post ' Framework I have been working‚Ä¶ (Part 2) ' I mentioned I watched a few episodes of ' Handmade Hero ‚Äôs series. Casey Muratori was using Emacs as a text editor coding C/C++(I think now he use 4coder instead of Emacs). I was surprised by how fast he can code in Emacs. So I made some research and discovered there is Vim which is another great text editor competing with Emacs. I decide to give both editor a try, and it turn out I chose Emacs over Vim. First, I would like to talk about why I chose Emacs over Vim. I think Emacs can do almost everything that Vim does. Vim stays cool he just wants to be a text editor and does not want to do something else. Emacs design the way that you could turn Emacs from text editor to something else. And of course, Emacs is not perfect. Emacs has few troubles doing something like you still need to use third-party software in order to run a package, and sometimes Emacs just froze when I am just trying to edit a text file. Emacs is just a right tool for me because I use to want a text editor that could edit any programming languages and do anything inside it. On the other hand, you might say that is gross to have a text editor do all kind of job for you. Why do not we just use another program instead of code in elisp and write your own functionality for Emacs? Is that even worth it? The answer is really depend on who is using it. For me, I program in different programming languages; I would somehow need to use other text editor or IDE when I change to code in another programming language. For example, I code Java and C++ I would have to change from ‚ÄòEclipse‚Äô/‚ÄòAndroid Studio‚Äô to ‚ÄòVisual Studio‚Äô/‚ÄòMonoDevelop‚Äô. And these IDEs has different key bindings, which I really hate because I would somehow make mistakes by pressing the wrong key binding from previous IDE to current IDE. In this case, Emacs/Vim become useful because I could finally code all programming languages with the same key bindings. On the other hand, if you are a front-end developer you would recommend people use Sublime Text instead of Emacs because it is wasting your time and is not worth it anymore. ","date":"2017-11-12","objectID":"/blog/best-editor-ever/:0:0","tags":["Editor"],"title":"Best Editor Ever","uri":"/blog/best-editor-ever/"},{"categories":["Editor"],"content":"* My emacs file config repo * url: https://github.com/jcs090218/jcs-emacs ","date":"2017-11-12","objectID":"/blog/best-editor-ever/:0:1","tags":["Editor"],"title":"Best Editor Ever","uri":"/blog/best-editor-ever/"},{"categories":["Editor"],"content":"* Few Videos I watched when I learn Emacs * Casy‚Äôs Emacs Tutorial: https://www.youtube.com/watch?v=hbmV1bnQ-i0\u0026t=1584s Stop Worrying and Love Emacs: https://www.youtube.com/watch?v=JWD1Fpdd4Pc ","date":"2017-11-12","objectID":"/blog/best-editor-ever/:0:2","tags":["Editor"],"title":"Best Editor Ever","uri":"/blog/best-editor-ever/"},{"categories":["Productivity"],"content":"Productivity is topic that often is ignored by a lot programmer. I have seen a bunch of documents out there talking about algorithm and data structure, so I would like to post a topic about productivity for an advanced programmer or for the programmer who wants to be a better programmer. So what exactly mean productivity in software development field? If you have seen my previous blog post ' Framework I have been working‚Ä¶ (Part 1) ' and ' Framework I have been working‚Ä¶ (Part 2) ‚Äò, then you might already know what I am going to write about for the rest of this article. So what essentially methods that we could do to improve the productivity for ourselves as a software engineer? First of all, I would say build your tools. Anything that could speed up the development process will increase the productivity of the project. It sounds straightforward to make your tools or library, but when you start making it, it actually kind of hard to make. That I have heard of a lot of people asking me how to make a library for other people to use? Building a tool is hard and time-consuming. The first thing to make your tool is to have learned Design Pattern (I have already mentioned few books I recommend in my previous post - ' Framework I have been working‚Ä¶ (Part 1) ‚Äò). Attention, learn design pattern is to learn how to build a better software architecture. Not to learn how to use a design pattern in your code! I have seen programmers use design pattern all the time and feel bad about it because they seem to be attempt to use design pattern instead of designing a software architecture. Once you have the skill and knowledge of design pattern. I would recommend seeing how other people build their tools on any open source platform. As everyone knows GitHub, GitLab, SourceForge, etc. Designing tools are thinking about how to make other programmers feel comfortable when using your tool. Think what kind of params have to pass into this function? Think is this feature that is needed to be here/design? ","date":"2017-10-24","objectID":"/blog/productivity/:0:0","tags":["Productivity"],"title":"Productivity","uri":"/blog/productivity/"},{"categories":["Productivity"],"content":"The story start when I have difficulty when I was working inside one of our class in college. It is a collaborative class that all kind of experts work on the same project, and of course for game development students we decide to make a AR game. Well, the dream always big and great, but when it get into reality it always not going to be fun, especially when you are making a game and work in the game industry. Game is a hard thing to work on , both on the programming side and the art side. All members in the group will just get stressful every day and every week. Plus when you know that you are the only programmer in the team, I think this could be really stressful. I would just admit I stress out the first day of class despite I already have some experience using the game engine Unity. Because for whole semester I was so stressful, so I did not remember much what I did for the class in details. In fact, I did everything except the art for the project. It was fun and I did learn three things from this class. Never repeat yourself. (Duplicate code) Design Patterns. New technology is dangerous. Never repeat yourself, and the duplicate code is a significant part to be a good programmer Because duplicate code will cause copy and paste everywhere around the place. In architecture wise, copy and pasting the code everywhere is not a good structure and it could cause an issue if the program gets huge enough that you could not maintain the whole software. I am not saying I made the duplicate on this project, but what does annoying me is that I have nearly created everything the same over and over again in each project I have made from scratch. For instance, a scene manager could probably create for all kind of game because what kind of game does not need to switch a scene? Even a bad game will still need to switch scene from menu to gameplay. Design Patterns is the key for extreme programming and maintainability for software architecture. Prevent duplicate code is also the topic include from the design patterns. I would recommand people read ‚ÄòHead First Design Pattern‚Äô that are written by Eric Freeman and Elisabth Robson. The example code was written in Java and as everyone knows that Java is a good programming language when people need to explain OOP concepts. Otherwise, there is another option book ‚ÄòDesign Patterns‚Äô written by a bunch of good C++ programmers, for people who feel more comfortable with using C++ than using Java. At this time, one of my instructor [Billy Garban](https://www.linkedin.com/in/billylemonzest/) from Academy of Art University suggests me to watch [Handmade Hero](https://www.youtube.com/user/handmadeheroarchive) series that host by [Casey Muratori](https://twitter.com/cmuratori) . I have watched a few episodes what make me impressive is how he can teach people in such a way that everyone could understand, including me. I like when he talks about what makes him special is his productivity to the company. (I will discuss a bit more 'productivity' in another post.) This changes me think differently instead of just thinking about algorithm and data structure. What makes you different than other programmers? Then I realize, being productive is important and advance as a programmer. Then I figure out that how to make myself productive as much as possible is to write your own tool. The reason is simple, the majority of people that are not programmer might think of the most time programmer did is to type the program itself, but I believe this is a huge mistake. In fact, the time spending on thinking is way more than time spent on actually typing. So writing your own tool is saving your time when you think. Here is a list of some frameworks or libraries that I have created for my own use during my college years. All of them have a different purpose, and some of them were written in various programming language. These are also the evidence that these tools did save me a lot of time when doing my school work. Think back i","date":"2017-09-27","objectID":"/blog/framework-i-have-been-working-on/:0:0","tags":["Productivity","framework"],"title":"Framework I have been working on","uri":"/blog/framework-i-have-been-working-on/"},{"categories":["Productivity"],"content":"JCSCos2x URL: https://github.com/jcs090218/JCSCos2x_Lib_src ","date":"2017-09-27","objectID":"/blog/framework-i-have-been-working-on/:0:1","tags":["Productivity","framework"],"title":"Framework I have been working on","uri":"/blog/framework-i-have-been-working-on/"},{"categories":["Productivity"],"content":"JCSLOVELua URL: https://github.com/jcs090218/JCSLOVELua_Framework ","date":"2017-09-27","objectID":"/blog/framework-i-have-been-working-on/:0:2","tags":["Productivity","framework"],"title":"Framework I have been working on","uri":"/blog/framework-i-have-been-working-on/"},{"categories":["Productivity"],"content":"JCSPyGm_Lib URL: https://github.com/jcs090218/JCSPyGm_Lib ","date":"2017-09-27","objectID":"/blog/framework-i-have-been-working-on/:0:3","tags":["Productivity","framework"],"title":"Framework I have been working on","uri":"/blog/framework-i-have-been-working-on/"},{"categories":["Productivity"],"content":"JCSUnity URL: https://github.com/jcs090218/JCSUnity_Framework ","date":"2017-09-27","objectID":"/blog/framework-i-have-been-working-on/:0:4","tags":["Productivity","framework"],"title":"Framework I have been working on","uri":"/blog/framework-i-have-been-working-on/"},{"categories":["Announcement"],"content":"I‚Äôm not fond of talking about myself. Primarily I‚Äôm nobody, not phenomenal, and never been onto news or other media, not any of those. Is hard to think that who will spend their precious time reading this ‚ÄòAbout Me‚Äô article. I would desire not to write a verbose introduction about myself. I‚Äôm currently 24; I wouldn‚Äôt say that I lived long, but long enough for me to review my past few years of living and consider what‚Äôs the future path I‚Äôm going to step in. The story always starts sad; it was entirely a disaster in my early life. I‚Äôm very pessimistic, give up things quickly, and not knowing how to be persistent. Wonder where are the differences between success and failure. Maybe I do have gifts for doing things right, but not for long. When I grew up a little, I‚Äôm already at the bottom of the class. I usually couldn‚Äôt be proud of myself especially when you have brothers and sisters that they often did things better than you. Util to the day first year of middle school, my life of concepts has a drastic change; my grade stays at the average rate, but instead of focusing on grades, my parent chose to have me entered the athletic class in tennis rather than the regular class. I felt motivated about sports comparing to coursework. During spartan training from our coaches, plus my innate health doesn‚Äôt take any advantages to make me successful in tennis. I finally got my first specialty by been through all the rigorous training. Form this experience; I learned the importance of being persistent, sometime you couldn‚Äôt care for all the possibilities, and confidence. Last year of the middle school years, I went back to the regular class. I decide to challenge something that I was always trying to avoid, studying. In the beginning, this wasn‚Äôt easy for me by doing something that isn‚Äôt that interesting. In a certain opportunity, I get to know some thoughts about life, which are ‚ÄúLife aren‚Äôt always happy.‚Äù and ‚ÄúIn some aspect, no one like to study.‚Äù. I kept these thoughts in mind and started to do the hard work on studying. Surprisingly, my grades have some improvements. Although this could not be enough to be like the top 3 in our school, this makes me comprehend somethings that are way more important than the grade. ‚ÄúExertion wouldn‚Äôt betray you.‚Äù and ‚ÄúKnowing the taste of success, would make you feel omnipotent.‚Äù There are a lot of things that happened in high school. The truths are that not everything goes perfectly throughout my life. During my high school life is my first time getting bullied at school, not physically but metaphysically. I reckon because I was too proud and aggressive at that time and I argued all the subtleties and most of the time I was right. Consequent that being always right does not mean success in real life. I was in despair about the reality and learned some significant lessons, not arguing so much and be humble. After the worst part of my life, I started to get in touch with people carefully. I attempted to learn how to talk to people and endeavored to be modest. I would like to search for my equanimity at any time and face things more mature. My life wasn‚Äôt going smooth all the time; I underwent both pleasing and hurtful part of my life. I‚Äôm not like Albert Einstein or Nikola Tesla that smart. I learned lessons from every failure, and knowing from failure to success. Most of the time paying hard works wouldn‚Äôt get what you want, but you could change your life only if you tried. ","date":"2017-09-02","objectID":"/blog/about-me/:0:0","tags":["Announcement"],"title":"About Me","uri":"/blog/about-me/"},{"categories":["Announcement"],"content":"I have heard about people saying that writing a blog is a good idea. And here is it, I am going to write a development blog for myself. I have been coding for years and would like to share what I had been through and talk about more like what I think is significants to a programmer. What are the jobs and tasks to the programmer and what does programmer does? ","date":"2017-09-01","objectID":"/blog/start-blog-announcment/:0:0","tags":["Announcement"],"title":"Start blog announcment","uri":"/blog/start-blog-announcment/"},{"categories":null,"content":"Aboue me!","date":"2017-09-02","objectID":"/blog/about/","tags":null,"title":"Aboue me!","uri":"/blog/about/"},{"categories":null,"content":"Welcome to the Jen-Chieh Shen‚Äôs Blog! Welcome to my blog. I don‚Äôt think that I‚Äôm particularly talented, and I don‚Äôt believe in natural born talent. I believe that it takes hard work to achieve great things. I‚Äôm not religious, but if there is a god, he hasn‚Äôt done me any favors. I‚Äôm a bit lazy and I like to have my personal space; like to contemplate with the thing that stimulates my curiosity. Enjoy observing people, emotions, and deducting future by present facts. If you want to know more about me, check out this. I fell in love with computer science in 2013. I made this blog mostly from scratch using basic HTML/CSS/JS for the frontend and Node.js for the backend. I‚Äôd like to share my process and experience making software on this blog. I have other interests as well, though I‚Äôm not an expert in any of them. I like physics, because it can explain so much that happens in our daily lives. I enjoy math, as it can represent so much with symbols and formulas. I also like philosophy and how it can help people think more critically.one of my favorites quotes is ‚ÄúKnowledge is power.‚Äù ","date":"2017-09-02","objectID":"/blog/about/:0:0","tags":null,"title":"Aboue me!","uri":"/blog/about/"}]